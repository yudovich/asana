{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\asana\\\\my-app\\\\src\\\\taskListFromAsana.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Asana = require('asana');\nconst date = new Date();\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '2/1207153187462584/1207160651338176:ae47e627318906c853675585bb006e95';\nlet tasksApiInstance = new Asana.TasksApi();\nlet opts = {\n  'limit': 5,\n  'project': \"1207158378702041\",\n  'completed_since': date,\n  'opt_fields': \"name,due_on\"\n};\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [nextOffset, setNextOffset] = useState(null); // Initialize nextOffset with null\n  const [initialFetch, setInitialFetch] = useState(true); // Track if initial fetch is done\n\n  const fetchTasks = offset => {\n    const options = initialFetch ? opts : {\n      ...opts,\n      offset\n    }; // Include offset conditionally\n    tasksApiInstance.getTasks(options).then(result => {\n      console.log(\"Response:\", result); // Log the entire response object\n      if (result.next_page) {\n        console.log(\"Next Offset:\", result.next_page.offset); // Log the next offset separately\n        setNextOffset(result._response.next_page.offset); // Update nextOffset with the offset for the next request\n      }\n      if (initialFetch) {\n        setTasks(result.data); // Set tasks directly for the initial fetch\n        setInitialFetch(false); // Update initial fetch status\n      } else {\n        setTasks(prevTasks => [...prevTasks, ...result.data]); // Append new tasks to the existing tasks array\n      }\n    }).catch(error => {\n      console.error(error.response ? error.response.body : error); // Log the error response body if available\n    });\n  };\n  useEffect(() => {\n    fetchTasks(); // Fetch tasks when the component mounts without offset\n  }, []); // Empty dependency array ensures useEffect runs only once\n\n  const handleShowMore = () => {\n    fetchTasks(nextOffset); // Fetch more tasks when the \"Show More\" button is clicked with the next offset\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [task.name, \" - Due on: \", task.due_on]\n      }, task.gid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), nextOffset && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowMore,\n      children: \"Show More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 22\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"eczabGT/rj6xsdi5l8bhwqnvOgo=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Asana","require","date","Date","client","ApiClient","instance","token","authentications","accessToken","tasksApiInstance","TasksApi","opts","TaskList","_s","tasks","setTasks","nextOffset","setNextOffset","initialFetch","setInitialFetch","fetchTasks","offset","options","getTasks","then","result","console","log","next_page","_response","data","prevTasks","catch","error","response","body","handleShowMore","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","name","due_on","gid","onClick","_c","$RefreshReg$"],"sources":["D:/Work/asana/my-app/src/taskListFromAsana.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nconst Asana = require('asana');\r\nconst date = new Date();\r\n\r\nlet client = Asana.ApiClient.instance;\r\nlet token = client.authentications['token'];\r\ntoken.accessToken = '2/1207153187462584/1207160651338176:ae47e627318906c853675585bb006e95';\r\n\r\nlet tasksApiInstance = new Asana.TasksApi();\r\nlet opts = { \r\n    'limit': 5, \r\n    'project': \"1207158378702041\", \r\n    'completed_since': date,\r\n    'opt_fields': \"name,due_on\"\r\n};\r\n\r\nconst TaskList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [nextOffset, setNextOffset] = useState(null); // Initialize nextOffset with null\r\n  const [initialFetch, setInitialFetch] = useState(true); // Track if initial fetch is done\r\n\r\n  const fetchTasks = (offset) => {\r\n    const options = initialFetch ? opts : { ...opts, offset }; // Include offset conditionally\r\n    tasksApiInstance.getTasks(options)\r\n      .then((result) => {\r\n        console.log(\"Response:\", result); // Log the entire response object\r\n        if (result.next_page) {\r\n          console.log(\"Next Offset:\", result.next_page.offset); // Log the next offset separately\r\n          setNextOffset(result._response.next_page.offset); // Update nextOffset with the offset for the next request\r\n        }\r\n        if (initialFetch) {\r\n          setTasks(result.data); // Set tasks directly for the initial fetch\r\n          setInitialFetch(false); // Update initial fetch status\r\n        } else {\r\n          setTasks(prevTasks => [...prevTasks, ...result.data]); // Append new tasks to the existing tasks array\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.response ? error.response.body : error); // Log the error response body if available\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTasks(); // Fetch tasks when the component mounts without offset\r\n  }, []); // Empty dependency array ensures useEffect runs only once\r\n\r\n  const handleShowMore = () => {\r\n    fetchTasks(nextOffset); // Fetch more tasks when the \"Show More\" button is clicked with the next offset\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Task List</h1>\r\n      <ul>\r\n        {/* Map over the tasks array and render each task */}\r\n        {tasks.map(task => (\r\n          <li key={task.gid}>\r\n            {/* Display the task title */}\r\n            {task.name} - Due on: {task.due_on}\r\n            {/* Optionally display a completion status */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {nextOffset && <button onClick={handleShowMore}>Show More</button>} {/* Render the button only if nextOffset is available */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}